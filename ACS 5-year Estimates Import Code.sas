/*********************  Program Name: ACS 5-year Estimates Import Code.sas  *****************************************************************************************************************
Project Name: Geodatabase Creation 
Purpose:Importing/Processing the American Community Survey 5-Year Estimates into a single SAS dataset per year for each state or the entire US, with only the data or interest
Programmer: Andrew Dey
Location: filepath
Notes: 
      This works for ACS data up to 2022. In 2022, the ACS format changed to a table based format

      How to Run it for All ACS Data:
    	1. Change the end of the %let sourced to be the correct year
    	2. Change the end of the sas libname to be the correct year
    	3. Import the Sequence Number Lookup Table as seq tab lookup for the correct year
    	4. Run all macros so they can be used
    	5. Change what sequences and states you want. If you want them all, leave it as is
    	6. Run the %CallSt macro for each sequence you are interested in
    	7. Run the *Code to Delete the Intermediate Tables: sfeSeqNumState, sfmSeqNumState and seq_seqnum*
    	8. Run the %OneFilePerState macro to create one dataset with all sequences per state
      9. If you want one file with all states, run the %CombineAllStates

      How to Run it for some ACS Data:
    	1. Change the end of the %let sourced to be the correct year
    	2. Change the end of the sas libname to be the correct year
    	3. Import the Sequence Number Lookup Table as seq tab lookup for the correct year
    	4. Run all macros so they can be used
    	5. Change what sequences and states you want. If you want them all, leave it as is
    	6. Run the %CallStSomeSeqs macro for each sequence you are interested in
    	7. Run the *Code to Delete the Intermediate Tables: sfeSeqNumState, sfmSeqNumState and seq_seqnum*
    	8. Run the %OneFilePerStateSomeSeqs macro to create one dataset with all sequences per state
      9. If you want one file with all states, run the %CombineAllStates
    

*******************************************************************************************************************************************************************
Datasets Used:
		--ACS Summary File Datasets downloaded from Census website
	 		
Datasets Created: All files ending in ACS5YearEstimates_Year.sas
Results Locations: N/A
Date Last Updated: 8/2050
*******************************************************************************************************************************************************************/

options validvarname=v7 mprint mfile symbolgen mlogic;
/*These options help to troublshoot the macros by having them print the logic used for their execution into the log, and by setting var names rules*/

DM "clear log";

/*This macro var is important, so you only need to change the year in the libname SAS code below*/
%let year = 2011;
/****Libnames*****/
/*make sure that the file path starts with  //**/

/*Libname stubs is location of the SeqTabLookup dataset*/
/*The STUBS libname is used for the Sequence Table Lookup file location(s)*/
LIBNAME stubs ''

/*The SAS libname is where the output datasets are stored
	It needs to be changed for each year*/
LIBNAME sas ''

/*The Sourced macro variable is used to indicate the location of the data to be imported
	It needs to be changed for each year*/
%let sourced = ''

/*The rootdir macro variable is assigned to a filepath that is used by the macro ReadDataFile
	to store sas code generated by the macro, which is subsequently run to import the data into SAS*/
%let rootdir = /*filepath is not in quotes*/


/************************************************************************************/


/*****Sequence Number Lookup Table*****/
**This table is important:
	*It has the metadata about the contents of each .txt file such as var names, sequence and table names that are 
		not stored in the .txt or .csv files themselves
	*The SeqNumLookup tables are used in the code below to properly import each table
	*The Table Numbers and Sequences are where the variables are stored and change every year: 
		so these tables can also be used to lookup the table ids, sequences and var names
;
/**Changing the name and seeing if the import worked**/
data work.seqtablookup;
set stubs.SeqNumTabNumLookup5y_&year.;
run;
/*QC Check here: check the log to make sure it says " Macro variable YEAR resolves to 'correct year'*/



/*** Macro 1: AnyGeo: Imports the Geography File ***/
%macro AnyGeo(geography);
/*  All ACS geographic Summary File headers have the same following layout
    See Technical documentation for more information on geographic header files
    and additional ACS Geography information          */

data work.&geography;

  INFILE "&sourced.&geography..txt" MISSOVER TRUNCOVER LRECL=500;

  LABEL FILEID  ='File Identification'          STUSAB   ='State Postal Abbreviation'
        SUMLEVEL='Summary Level'                COMPONENT='geographic Component'
        LOGRECNO='Logical Record Number'        US       ='US'
        REGION  ='Region'                       DIVISION ='Division'
        STATECE ='State (Census Code)'          STATE    ='State (FIPS Code)'
        COUNTY  ='County'                       COUSUB   ='County Subdivision (FIPS)'
        PLACE   ='Place (FIPS Code)'            TRACT    ='Census Tract'
        BLKGRP  ='Block Group'                  CONCIT   ='Consolidated City'
        CSA     ='Combined Statistical Area'    METDIV  ='Metropolitan Division'
        UA      ='Urban Area'                   UACP    ='Urban Area Central Place'
        VTD     ='Voting District'              ZCTA3  ='ZIP Code Tabulation Area (3-digit)'
        SUBMCD  ='Subbarrio (FIPS)'             SDELM  ='School District (Elementary)'
        SDSEC   ='School District (Secondary)'  SDUNI  ='School District (Unified)'
        UR      ='Urban/Rural'                  PCI    ='Principal City Indicator'
        TAZ     ='Traffic Analysis Zone'        UGA    ='Urban Growth Area'
        GEOID   ='geographic Identifier'        NAME   ='Area Name'                         
        AIANHH  ='American Indian Area/Alaska Native Area/Hawaiian Home Land (Census)'
        AIANHHFP='American Indian Area/Alaska Native Area/Hawaiian Home Land (FIPS)'
        AIHHTLI ='American Indian Trust Land/Hawaiian Home Land Indicator'
        AITSCE  ='American Indian Tribal Subdivision (Census)'
        AITS    ='American Indian Tribal Subdivision (FIPS)'
        ANRC    ='Alaska Native Regional Corporation (FIPS)'
        CBSA    ='Metropolitan and Micropolitan Statistical Area'
        MACC    ='Metropolitan Area Central City'   
        MEMI    ='Metropolitan/Micropolitan Indicator Flag'
        NECTA   ='New England City and Town Combined Statistical Area'
        CNECTA  ='New England City and Town Area'
        NECTADIV='New England City and Town Area Division'
        CDCURR  ='Current Congressional District'
        SLDU    ='State Legislative District Upper' 
        SLDL    ='State Legislative District Lower'
        ZCTA5   ='ZIP Code Tabulation Area (5-digit)'
        PUMA5   ='Public Use Microdata Area - 5% File'
        PUMA1   ='Public Use Microdata Area - 1% File'                                  ;
  INPUT
        FILEID    $ 1-6         STUSAB    $ 7-8         SUMLEVEL  $ 9-11                            
        COMPONENT $ 12-13       LOGRECNO  $ 14-20       US        $ 21-21  
        REGION    $ 22-22       DIVISION  $ 23-23       STATECE   $ 24-25                           
        STATE     $ 26-27       COUNTY    $ 28-30       COUSUB    $ 31-35 
        PLACE     $ 36-40       TRACT     $ 41-46       BLKGRP    $ 47-47     
	/***AD 6/6/23: Commented out geographies that are not needed***/ 
/*        CONCIT    $ 48-52       AIANHH    $ 53-56       AIANHHFP  $ 57-61*/ 
/*        AIHHTLI   $ 62-62       AITSCE    $ 63-65       AITS      $ 66-70                           */
/*        ANRC      $ 71-75       CBSA      $ 76-80       CSA       $ 81-83*/
/*        METDIV    $ 84-88       MACC      $ 89-89       MEMI      $ 90-90                           */
/*        NECTA     $ 91-95       CNECTA    $ 96-98       NECTADIV  $ 99-103  */
/*        UA        $ 104-108     UACP      $ 109-113     CDCURR    $ 114-115                         */
/*        SLDU      $ 116-118     SLDL      $ 119-121     VTD       $ 122-127 */
  	    ZCTA3     $ 128-130     ZCTA5     $ 131-135     SUBMCD    $ 136-137      
/*        SDELM     $ 138-142     SDSEC     $ 143-147     SDUNI     $ 148-152*/
/*        UR        $ 153-153     PCI       $ 154-154     TAZ       $ 155-160                         */
/*        UGA       $ 161-165     PUMA5     $ 166-170     PUMA1     $ 171-175*/
        GEOID     $ 176-215     NAME      $ 216-415                           ;
run;
%mend;



/****Macro 2: TableShells****/
/*The TableShell Macro is a basic SAS set statement that will get basic metadata                                                                            
  information about ACS Detailed Tables from the SeqTabLookup dataset by table id
  see chapter 5 and 6 of technical documentation for more information                */
%macro TableShells(tblid);
data work.Table_&tblid;
  set work.SeqTabLookup;
   /*Remove single quotes from metadata (Note: This is done to simplify reading in the 
     metadata                                                                        */
   title=tranwrd(title, "'", "''");
   /*Remove non data lines these lines end with .7 and do NOT have a linking 
     field in the data files they are made available for readability (they can be kept)*/
   if index(order,".") then order = ".";
   if tblid=upcase("&tblid") then output;
run;
%mend;



/****Macro 3: TablesBySeq****/;
%macro TablesBySeq(Seq);
/*The TablesBySeq Macro is a basic SAS set statement that will get basic metadata                                                                           
  information about ACS Detailed Tables from the SeqTabLookup dataset by sequence number
  see chapter 5 and 6 of technical documentation for more information                  */
data work.Seq_&seq;
  set work.SeqTabLookup;
   /*Remove single quotes from metadata (Note: This is done to simplify reading in the 
     metadata)                                                                          */
   title=tranwrd(title, "'", "''");
   /*Remove non data lines these lines end with .7 and do NOT have a linking 
     field in the data files they are made available for readability (they can be kept)*/
   if index(order,".") then order = ".";
   if seq=upcase("&seq") then output;
run;
%mend(TablesBySeq);



/****Macro 4: ReadDataFile:****/
/*It is used in the AllSeqs macro*/
%macro ReadDataFile(type,geo,seq);
/*The ReadDataFile is a macro that will generate SAS code for a specific estimate type,
  a specific geography, by sequence number.  The macro will write the code into the RootDir, and also run the code that it generates  */

/*Start to generate SAS code from the metadata file created from the TablesBySeq macro   */
data _null_;
  set work.Seq_&seq;
  /*Save code to FILE statement below*/
    FILE "&rootdir.&type.&year.5&geo.&seq.000.txt" ;/*I added .20131 between type. and &geo, and added .000 after seq*/

    /*For the first observation of the metadata dataset start to write out code to read in
      the first 6 fields of data summary files, this is consistent for every summary file
      see Chapter 2 of the technical documentation                                       */
    if _n_ =1 then       do;
        put "TITLE ""&type.&year.5&geo.&seq.000"";";
        put "DATA work.SF&type.&seq.&geo;";
        put " ";
        put "   LENGTH FILEID   $6";
        put "          FILETYPE $6";
        put "          STUSAB   $2";
        put "          CHARITER $3";
        put "          SEQUENCE $4";
        put "          LOGRECNO $7;";
        put " ";
        put "INFILE '&sourced.&type.&year.5&geo.&seq.000.txt' DSD TRUNCOVER DELIMITER =',' LRECL=3000;";											
        put " ";
        put "LABEL FILEID  ='File Identification'";
        put "      FILETYPE='File Type'  ";
        put "      STUSAB  ='State/U.S.-Abbreviation (USPS)'";
        put "      CHARITER='Character Iteration'";
        put "      SEQUENCE='Sequence Number'";
        put "      LOGRECNO='Logical Record Number'";
        put " ";
     end;
    /*postition tells what field the table begins at for example table B08046 starts at position 
      7 of sequence file 0001                                                                   */
    if position ^=. then put " ";
    /*If the order is blank than the title is a non-data line, Table Title, Table Universe or non
      data line; these lines are written out but commented out                                  */
    if order =.     then put "/*" title "*/";
    /*If we are at the first line of the table put in a space for readability                   */
    if order =1     then put " ";
    /*If the order is not blank then write out SAS code for LABEL                               */
    if order ^=. then    do;
        lineout= compress(tblid)||"&type"||compress(order)||"='"||trim(title)||"'";
        put lineout;
    end;
run;

/*Now write out the "INPUT" section of the SAS code to read in the data                         */
data _null_;
  set work.Seq_&seq;
   FILE "&rootdir.&type.&year.5&geo.&seq.000.txt" MOD;
    /*Again first 6 fields are constants like the LABEL section                                 */
    if _n_ =1 then do;
        put ";";            put " ";        put " ";
        put "INPUT";        put " ";        
        put "FILEID   $ ";
        put "FILETYPE $ ";         
        put "STUSAB   $ ";   
        put "CHARITER $ "; 
        put "SEQUENCE $ "; 
        put "LOGRECNO $ "; 
    end;
    if order =1 then put " ";
    /*INPUT the table data                                                                      */
    if order ^=. then    do;
        lineout= compress(tblid)||"&type"||compress(order);
        put lineout;
    end;
run;

data _null_;
    /*Finish up the program                                                                     */
   FILE "&rootdir.&type.&year.5&geo.&seq.000.txt" MOD;
        put ";"; put "RUN;";
run;

/*Run the generated code                                                                        */
%include "&rootdir.&type.&year.5&geo.&seq.000.txt";
%mend(ReadDataFile);



/****Macro 5: AllTableShells****/
%macro AllTableShells;
/*The AllTableShells macro will divide up the SeqTabLookup dataset into separate
  metadata files by table ID for more information on the SeqTabLookup dataset
  of the technical documentation                                                
  NOTE:  This is just an example of getting multiple table shells               */
/*Create a dataset with distinct table ids                                      */
proc sql;
    create table work.tblids as select distinct(tableid) from work.SeqTabLookup;
quit;

/*Call the TableShells macro with each distinct Table ID                        */
data _null_;
  set work.tblids;
    call execute('%TableShells(' || compress(tableid) || ')');
run;
%mend(AllTableShells);



/****Macro 6: AllSeqs****/
/*AllSeqs can be ignored for importing only some ACS data instead of all of it. For only some data, use SomeSeqs instead*/
/*This macro is commented out for readability*/
/*This macro is used in the CallSt macro */
/*%macro AllSeqs(geo);*/
/*/*The AllSeqs Macro serves as a control to read in data for a single geography  */
/*  by passing in the two digit alpha state abbreviation per sequence number      */*/
/*/*Read in the geographic header file for a single geography                     */*/
/*%AnyGeo (g&year.5&geo);*/
/*/*The do loop will create a sequence number valid values are 1 to 145 if you */
/*  only want a table in sequence 56 then set the do loop to be %do x=56 %to 56;   */
/*  and that will be the only sequence number read in to SAS */*/
/*/*If I want only some sequences, use this code, where the max value of %do %to is the number of items in XLIST:*/*/
/*	%LET XLIST = 0021 0033 0036 0040 0053 0069 0095 0069 0097 0107 0118; /*5/23 These are the sequence numbers of interest, no commas between them*/*/
/*		%do x=1 %to 11   ;/* Max is the number of itemsin a list.**/*/
/*	%LET VALUE=QSCAN(&XLIST,&I);/*use this when specifying a list of sequence numbers*/*/
/**/
/*/*If I want all sequences listed sequentially, use this code only, the max is the max sequence number:*/*/
/*/*%do x=1 %to 11*/*/
/*	%let var=&value;*/
/*    %let seq = %substr(&var,%length(&var)-3,4);*/
/*    /*Note:  The Sequence number IS 0 filled                                    */*/
/*    /*Get the metadata for the sequence number created by the do loop           */*/
/*    %TablesBySeq(&seq);*/
/*    /*Generate SAS code to read in the estimates, margin of error, and standard */
/*      error for the geography passed into the AllSeqs macro and the sequence */
/*      number created in the do loop above                                       */*/
/*    %ReadDataFile(e,&geo,&seq);*/
/*    %ReadDataFile(m,&geo,&seq);*/
/**/
/*    /*Step 4 Merge the Geography file created from the %AnyGeo macro and the 3 types  */
/*      of estimates from the %ReadDataFile macro into a single file by geography */*/
/*    data work.SF&geo&seq;*/
/*			/**AD: I also changed this from the SAS directory to the Work directory**/*/
/*      merge  g&year.5&geo(IN=g) SFe&seq&geo(IN=x) /*SFm&seq&geo(IN=y); */
/*	  		/*IMPORANT: Change the year at this line*/*/
/*       by logrecno;*/
/*   run;*/
/*%end;*/
/*%mend(AllSeqs);*/


*/



/*****Macro 7: SomeSeqs: use for only importing some ACS variables*****/
%macro SomeSeqs(seq,geo);
	%AnyGeo (g&year.5&geo);
    %TablesBySeq(&seq);
    %ReadDataFile(e,&geo,&seq);
    %ReadDataFile(m,&geo,&seq);

    /*Merge the Geography file created from the %AnyGeo macro and the 3 types  
      of estimates from the %ReadDataFile macro into a single file by geography */
    data work.SF&geo&seq;
			/**AD: I also changed this from the SAS directory to the Work directory**/
      merge  g&year.5&geo SFe&seq&geo SFm&seq&geo;
       by logrecno;
   run;

%mend(SomeSeqs);



/*****Macro 8: CallSt*****/
/*CallSt can be ignored for importing only some of the ACS data, use CallStSomeSeqs instead*/
/*%macro CallSt;*/
/*/*The CallSt macro is used to generate State 2 digit abbreviations see Appendix B*/
/*  of the technical documentation for a list of state codes                          */*/
/*/*The ACS summary file contains state 2 digit numeric codes from 1 to 72  */
/*/*If you want just a single state, such as Alabama set the do statement to start */
/*  and end at that state code such as %do i=1 %to 1; for Alabama                     */*/
/*%do i=1 %to 1;*/
/*    data _null_;*/
/*      stabbrv=compress(trim(lowcase(FIPSTATE(&i))));*/
/*        /*Note:  DC and PR are not covered in FIPS state function, and the two digit */
/*        function is not required to be 0 filled */*/
/*        if &i=0  then stabbrv = 'us';*/
/*        if &i=11 then stabbrv = 'dc';*/
/*        if &i=72 then stabbrv = 'pr';*/
/*        /*FIPS Codes 60 and 66 are fpr American Samoa and Guam */*/
/*        if &i=60 or &i=66 then stabbrv = "--";*/
/*        /*If the function returns a state abbreviation then run the AllSeqs macro           */*/
/*        if stabbrv ^= "--" then do;*/
/*            call execute('%AllSeqs(' || compress(stabbrv) || ')');              */
/*        end;*/
/*    run;*/
/*%end;*/
/*%mend(CallSt);*/

/***Calling the CallSt macro***/
/*%CallSt;*/



/****Macro 9: CallStSomeSeqs****/
/**This is the CallSt macro modified for just some ACS vars: I modifed the call execute command to have a sequence number*****/
%macro CallStSomeSeqs(sequence);
/*The CallSt macro is used to generate State 2 digit abbreviations see Appendix B
  of the technical documentation for a list of state codes                          */
/*The ACS summary file contains state 2 digit numeric codes from 1 to 72  
  Note:  FIPS codes are NOT sequential so if a code does not exist such as 71  
         The call execute statement will NOT run because there is no state abbrev   */
/*If you want just a single state, such as Alabama set the do statement to start 
  and end at that state code such as %do i=1 %to 1; for Alabama                     */
%do i=1 %to 72;
    data _null_;
      stabbrv=compress(trim(lowcase(FIPSTATE(&i))));
        /*Note:  DC and PR are not covered in FIPS state function, and the two digit 
        function is not required to be 0 filled */
        if &i=0  then stabbrv = 'us';
        if &i=11 then stabbrv = 'dc';
        if &i=72 then stabbrv = 'pr';
        /*FIPS Codes 60 and 66 are fpr American Samoa and Guam */
        if &i=60 or &i=66 then stabbrv = "--";
        /*If the function returns a state abbreviation then run the AllSeqs macro           */
        if stabbrv ^= "--" then do;
            call execute('%SomeSeqs(&sequence.,' || compress(stabbrv) || ')');              
        end;
    run;
%end;
%mend(CallStSomeSeqs);



/**The list of ACS sequences I want for 2011: '0015', '0043', '0056', '0072', '0099', '0103'**/
%CallStSomeSeqs(0015);  %CallStSomeSeqs(0043);%CallStSomeSeqs(0056);
%CallStSomeSeqs(0072); %CallStSomeSeqs(0099); %CallStSomeSeqs(0103);



/***Code to Delete the Intermediate Tables: sfeSeqNumState, sfmSeqNumState and seq_seqnum***/
proc datasets library=work memtype=data nolist;
delete sfm0: sfe: seq_;
run;quit;


/**Testing that it only deleted the tables I want**/
/*the datasets I do not want*/

proc print data=work.sfmma0015 (obs=10);
proc print data=work.sfema0015 (obs=10);
proc print data=work.seq_0015 (obs=10);


/*Testing that it still has the dataset I do want*/
proc print data=work.sfma0015 (obs=10);



/***Macro 10: OneFilePerState***/
/*OneFilePerState can be ignored for importing some ACS data, use OneFilePerStateSomeSeqs instead*/
/*%macro OneFilePerState(year,state, FIPS);*/
/*data work.ACS5year_&year._&fips.;*/
/*merge work.sf&state.0001-work.sf&state.0118;/*AD 4/27/23: Change the value of the second table to the highest sequence number you are working with*/*/
/*	/*AD 4/28/23: anatomy of the datsetnames: they exist as temp.sf (summary file) state abbreviation like ma, sequence number*/*/
/*by logrecno;*/
/*drop sequence;/*AD 5/10/23: the sequence var only takes the value of the final sequence read in, and is not useful*/*/
/*run;*/
/*%mend(OneFilePerState);*/



/****Macro 11: OneFilePerStateSomeSeqs: Used for only importing some ACS data****/
/**
Section 1: Creates one file per state macro for just the sequences of interest
Section 2: Creates dataset with just the variables of interest
**/
/**This macro can be run for all states using the %CombineAllStates macro below**/;
/**Make sure the numbers at the end of the datasets in the Section 1 are the sequences of interest**/
%macro OneFilePerStateSomeSeqs(year,state, FIPS);
/*Section 1: One dataset per year with all sequences of interest*/
data work.ACS5year_&year._&fips.;
merge work.sf&state.0015 work.sf&state.0043 work.sf&state.0059 /*Make sure the sequence numbers here are the same ones imported by %CallStSomeSeqs macro before*/
	work.sf&state.0076 work.sf&state.0112 work.sf&state.0115;
	/*AD: Anatomy of the datsetnames: they exist as temp.sf (summary file)+state abbreviation (e.g. ma)+sequence number
	e.g. work.sfma0021*/
by logrecno;
drop sequence;/*AD: the sequence var only takes the value of the final sequence read in, and is not useful*/
run;
/*Section 2: Selecting only variables of interest*/
/*AD: Use the code forthat year in Section 2 of the program ACS 5 Year Estimates - Finding CSES Variable Info*/
/**AD: Change the variables to the ones I want for a given year**/
data sas.ACS5yr_&year._SomeVars_&state.;
set work.ACS5year_&year._&fips.
	(keep=fileid STUSAB SUMLEVEL COMPONENT LOGRECNO US REGION DIVISION STATECE STATE COUNTY COUSUB PLACE TRACT GEOID ZCTA5 NAME
	/**Crowded **/
	B25014e1-B25014e13
	/*Prop100*/
	B25077e1 /*Median value (dollars) in Universe: Owner Occupied Housing Units*/
	/*poverty level*/
	B06012e1 /*total*/ B06012e2 /*Below 100 percent of the poverty level*/ 
/*	B07012PRe1 B07012PRe2 /*PR poverty vars*/
	/*HHINC seq 0058*/
	B19013e1 
	/*High Education*/
	B15002e1/*total*/
	B15002e14-B15002e18 /*<-Males*/ 
	B15002e31-B15002e35 /*<-Females*/
	/*Low Education*/
	B15002e3-B15002e9 /*<-Males*/ 
	B15002e20-B15002e26/*<-Females*/
	/*PCT_Unemp*/
	B23001e1-B23001e173/*total*/ /*E.g. B23001e8 /*male, 16 to 19 years, unemployed* B23001e94 /*female, 16 to 19 years, unemployed*/
	);
 run;
%mend(OneFilePerStateSomeSeqs);



/****Macro 12: CombineAllStates****/;
/**Looping through all states and combining them to make one dataset per state**/
%macro CombineAllStates(year);
/*Census Bureau put this in a macro to access the do loop                       */
/*The ACS summary file contains state 2 digit numeric codes from 1 to 72  
  Note:  FIPS codes are NOT sequential so if a code does not exist such as 71  
         The call execute statement will NOT run because there is no state abbrev   */
/*If you want just a single state, such as Alabama set the do statement to start 
  and end at that state code such as %do i=1 %to 1; for Alabama                     */
%do i=1 %to 72;
    data _null_;/*This essentially puts everything done in the code below inside a dataset*/
      stabbrv=compress(trim(lowcase(FIPSTATE(&i))));
        /*Note:  DC and PR are not covered in FIPS state function, and the two digit 
        function is not required to be 0 filled */
        if &i=0  then stabbrv = 'us';
        if &i=11 then stabbrv = 'dc';
        if &i=72 then stabbrv = 'pr';
        /*FIPS Codes 60 and 66 are for American Samoa and Guam */
        if &i=60 or &i=66 then stabbrv = "--";
        /*If the function returns a state abbreviation then run the AllSeqs macro           */
        if stabbrv ^= "--" then do;
		/*This line creates the macro call, the stabbrv is resolves to the state name in the sequence datasets*/           
             
/*       		 call execute( '%OneFilePerState('||&year.||','|| compress(stabbrv) ||','|| &i ||')');               */   /* Use this line for just all ACS vars*/   
			 call execute( '%OneFilePerStateSomeSeqs('||&year.||','|| compress(stabbrv) ||','|| &i ||')');  /* Use this line for just some ACS vars*/             
				
		/*AD: I want the i=1 instance of this to resolve to %CombiningWithinState(2011,al,01);*/
		end;
    run;
%end;
%mend(CombineAllStates);

%CombineAllStates(2011);

/*Clearing out the work directory to be able to import the next Year's code*/
proc datasets library=work memtype=data nolist;
delete sf: seq: ACS5year:;
run;quit;









